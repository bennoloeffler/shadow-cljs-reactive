{"version":3,"sources":["comp/bmi.cljs"],"mappings":";AAKA,AAAKA,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAIZ,AAAA,AAAMC,AAASC,AAAGC;AAAlB,AACE,AAAGA,AAAI,AAAG,AAAA,AAAGD,AAAQ,AAAA,AAAGA;;AAE1B,AAAA,AAAME,AAASC,AAAGF;AAAlB,AACE,AAAA,AAAO,AAACG,AAAU,AAAGD,AAAGF;;AAE1B,AAAA,AAAMI,AAAUF,AAAGH;AAAnB,AACE,AAAGG,AAAG,AAAG,AAAA,AAAGH,AAAQ,AAAA,AAAGA;;AAEzB,AAAA,AAAMM,AAAKC,AAAUC;AAArB,AACE,AAACC,AAAmB,AAAA,AAAA,AAAUF,AAAeC;;AAE/C,AAAA,AAAAE,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA2BR;AAA3B,AAAAY,AAAAJ,AAAA,AAA8BX;AAA9B,AAAAe,AAAAJ,AAAA,AAAiCV;AAAjC,AACE,AACE,AAAA,AAAMA;AAAK,AAAA,AAACgB,AAAMpB,AAAMqB,AAAW,AAACb,AAASF,AAAGH;;AADlD,AAEE,AAAA,AAAMG;AAAI,AAAA,AAACc,AAAMpB,AAAMqB,AAAU,AAACnB,AAAQC,AAAGC;;AAF/C,AAGE,AAAA,AAAMD;AAAI,AAAA,AAACiB,AAAMpB,AAAMqB,AAAU,AAAChB,AAAQC,AAAGF;;AAH/C,AAIQ,AAAA,AAACgB,AAAMpB,AAAMqB,AAAW,AAACb,AAASF,AAAGH;;;;;;AAE/C,AAOA,AAAA,AAAMmB,AAAQC,AAAIb,AAAUc,AAAIC,AAAIC,AAAMC;AAA1C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEiCD,AAAWF,AAASC,AAE9B,AAAKG;AAAL,AACE,AAAMC,AAAU,AAACC,AAAY,AAAA,AAAIF;AAAjC,AACE,AAACR,AAAMpB,AAAMqB,AAAME,AAAIM;;AACvB,AAAA,AAACT,AAAMpB,AAAMqB,AAAMM;;AACnB,AAAA,AAAAI,AAACX,AAAMpB,AAAMmB,AAAYnB;AARpD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASmC,AAAES,AAAIC,AAAU,AAAAsB,AAAA,AAAAD,AAAM/B;AAAN,AAAA,AAAAgC,AAAAA,AAACT,AAAAA,AAAAA;;;AAEpD,AAAA,AAAMU;AAAN,AACE,AAAM7B,AAAI,AAAA,AAAA,AAAA2B,AAAO/B;AAAjBkC,AACwB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAG9B,AACH,AAAA,AAAGA,AACH,AAAA,AAAGA;;AAHjC,AAAA+B,AAAAD,AAAA,AAAA,AACOE;AADP,AAAAD,AAAAD,AAAA,AAAA,AACiBG;AADjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAK+EA,AAAQD,AAG5Dd,AAAoB,AAAA,AAAA,AAAAS,AAAM/B,AAC1BsB,AAAoB,AAAA,AAAA,AAAAS,AAAM/B,AAC1BsB,AAAmB,AAAA,AAAA,AAAAS,AAAO/B","names":["comp.bmi/state","reagent.core.atom","comp.bmi/calc-kg","cm","bmi","comp.bmi/calc-cm","kg","Math/sqrt","comp.bmi/calc-bmi","comp.bmi/s%f","precision","num","goog.string/format","p__27194","map__27195","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","comp.bmi/calc-state","cljs.core.swap_BANG_","cljs.core/assoc","comp.bmi/slider","sym","min","max","value","invalidates","e","new-value","js/parseInt","cljs.core/deref","G__27197","comp.bmi/bmi","vec__27198","cljs.core.nth","statement","color"],"sourcesContent":["(ns comp.bmi\r\n  (:require\r\n   [reagent.core :as r]))\r\n\r\n\r\n(def state (r/atom {:kg 91 :cm 177 :bmi 29.05}))\r\n\r\n; BMI = (/ kg  (square (/ cm 100)))\r\n\r\n(defn calc-kg [cm bmi]\r\n  (* bmi (* (/ cm 100) (/ cm 100))))\r\n\r\n(defn calc-cm [kg bmi]\r\n  (* 100 (Math/sqrt (/ kg bmi))))\r\n\r\n(defn calc-bmi [kg cm]\r\n  (/ kg (* (/ cm 100) (/ cm 100))))\r\n\r\n(defn s%f [precision num]\r\n  (goog.string/format (str \"%.\" precision \"f\") num))  \r\n\r\n(defn calc-state [{:keys  [kg cm bmi]}]\r\n  (cond \r\n    (nil? bmi) (swap! state assoc :bmi (calc-bmi kg cm))\r\n    (nil? kg) (swap! state assoc :kg (calc-kg cm bmi))\r\n    (nil? cm) (swap! state assoc :cm (calc-cm kg bmi))\r\n    :else (swap! state assoc :bmi (calc-bmi kg cm)))) ; finally - make bmi consistent - even if available\r\n\r\n(comment ;tests for calcer \r\n (s%f 2 (calc-bmi 91 177))\r\n (s%f 1 (calc-kg 177 29.05))\r\n (s%f 0 (calc-cm 91 29.05))\r\n (calc-state @state))\r\n\r\n; slider component\r\n(defn slider [sym precision min max value invalidates]\r\n  [:<>\r\n   [:input {:type \"range\" :value value :min min :max max\r\n            :style {:width \"300px\"} \r\n            :on-change (fn [e]\r\n                         (let [new-value (js/parseInt (.. e -target -value))]\r\n                           (swap! state assoc sym new-value)\r\n                           (swap! state assoc invalidates nil)\r\n                           (swap! state calc-state @state)))}]\r\n   [:div {:style {:float \"right\"}} ( s%f precision (sym @state))]])\r\n\r\n(defn bmi []\r\n  (let [bmi (:bmi @state)\r\n        [statement color] (cond (< bmi 18.5) [\"too skinny\" \"red\"]\r\n                                (< bmi 25) [\"totally ok\" \"lightgreen\"]\r\n                                (< bmi 30) [\"a litte fat\" \"orange\"]\r\n                                :else [\"definitely too fat\" \"red\"])]\r\n   [:div \"BMI Calculator - your are \" [:span {:style {:font-weight \"bold\" :color color}} statement] \r\n    [:table\r\n     [:tbody\r\n      [:tr [:td \"cm\"]  [:td [slider :cm 0 80 240 (:cm @state) :bmi]]]\r\n      [:tr [:td \"kg\"]  [:td [slider :kg 1 20 200 (:kg @state) :bmi]]]\r\n      [:tr [:td \"bmi\"] [:td [slider :bmi 2 5 70 (:bmi @state) :kg]]]]]\r\n    [:a {:href \"https://gist.github.com/bennoloeffler/93bb1436229f6dcb8a843505615cee4b\"} \"source\"]]))\r\n\r\n  \r\n"]}